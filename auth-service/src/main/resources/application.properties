spring.application.name=auth-service
server.port=0
spring.data.redis.host=localhost
spring.data.redis.port=6379
# Forbids JavaScript from accessing the cookie, for example, through the document.cookie property.
server.servlet.session.cookie.http-only=true
# Note: each time secured endpoint is reached (or any endpoint) session timeout
# is automatically restarted. Below setting means that if there is no any endpoint
# connection in 12-hours, session will be finished.
server.servlet.session.timeout=43200s
# Indicates the number of seconds until the cookie expires. A zero or negative number will expire the cookie immediately.
# If both Expires and Max-Age are set, Max-Age has precedence.
# I set the value for 86400 seconds (24 hours). So it means after creating a session after 24 hours users will be forced
# to log again. It also causes that cookie is not lost after browser is closed and it will remain.
server.servlet.session.cookie.max-age=86400
# Cookie with the same max age as session cookie, it's used to control whether the user is signed in frontend.
# I didn't want to use session cookie for that because it can be hijacked (using javascript document.cookie() f.e.)
# and then used to authorize by potential fraudster.
pl.lukasz94w.safe.mirrored.session.cookie.name=SAFE_MIRRORED_SESSION_COOKIE
pl.lukasz94w.safe.mirrored.session.cookie.max-age=${server.servlet.session.cookie.max-age} 
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

