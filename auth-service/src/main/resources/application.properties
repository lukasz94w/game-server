server.port=8093
#spring.session.redis.cleanup-cron=
spring.data.redis.host=localhost
spring.data.redis.port=6379
# Http-only set means no (potentially malicious) js script cannot access cookie, it is manually
# handled by the browser f.e. automatically added to the subsequent requests (after successful
# authorization). The http-only value is a part of cookie send to the browser after successful
# authorization.
# From doc: "Forbids JavaScript from accessing the cookie, for example, through the Document.cookie
# property. Note that a cookie that has been created with HttpOnly will still be sent with
# JavaScript-initiated requests, for example, when calling XMLHttpRequest.send() or fetch().
# This mitigates attacks against cross-site scripting (XSS)".
server.servlet.session.cookie.http-only=true
# Note: each time secured endpoint is reached (or any endpoint) session timeout
# is automatically restarted. Below setting means that if there is no any endpoint
# connection in 12-hours, session will be finished.
server.servlet.session.timeout=43200s
# From doc: "Indicates the number of seconds until the cookie expires. A zero or negative number will expire the cookie immediately.
# If both Expires and Max-Age are set, Max-Age has precedence".
# I set the value for 86400 seconds (24 hours). So it means after creating a session after 24 hours users will be forced
# to log again. It also causes that cookie is not lost after browser is closed and it will remain!
server.servlet.session.cookie.max-age=86400s
# if true then the cookie will be sent only over HTTPS connection, I don't have HTTPS connection (yet...)
# server.servlet.session.cookie.secure = true
# allows to set custom name for the cookie
# server.servlet.session.cookie.name = CUSTOMSESSIONID

